Харківський університет радіоелектроніки
Факультет комп'ютерних наук
Кафедра програмної інженерії


























ЗВІТ
до практичного заняття 1
з дисципліни "Аналіз та рефакторинг коду"
на тему: "Правила оформлення програмного коду"












Виконав ст. гр ПЗПІ-22-5
Бєлошапка Микита Юрійович


Перевірив
ст. викладач кафедри ПІ
Сокорчук Ігор Петрович
























Харків 2024
________________




1 МЕТА


     Ознайомитися з основними рекомендаціями щодо написання чистого, ефективного та підтримуваного коду для різних мов програмування, а також навчити аналізувати та рефакторити код для покращення його якості.




2 ЗАВДАННЯ


     Обрати мову програмування, дослідити основні рекомендації для написання якісного коду у цій мові, продемонструвати ці рекомендації на прикладах коду, обґрунтувати кожну рекомендацію і надати детальні пояснення. Для кожного прикладу мають бути наведені фрагменти коду.


3 ХІД РОБОТИ


Була обрана мова програмування SQL. 
SQL (Structured Query Language) — це мова програмування, призначена для роботи з реляційними базами даних. Вона дозволяє створювати, змінювати структуру даних, а також виконувати запити для отримання, оновлення, вставки чи видалення даних. SQL є однією з ключових технологій у сучасному світі, оскільки більшість програмних систем зберігають дані саме в базах даних.
Однак навіть правильно написаний SQL-код не завжди забезпечує високу продуктивність. У реальних проектах часто працюють із великими обсягами даних, які можуть налічувати мільйони або навіть мільярди записів. У таких випадках неправильно спроектовані запити можуть призводити до серйозних проблем:
1. Низька продуктивність: Некоректно написаний код може виконуватись значно довше, ніж потрібно. Це впливає на користувацький досвід і може спричинити затримки в роботі системи.
2. Перевантаження серверів: Неоптимальні запити споживають надмірну кількість ресурсів бази даних (процесорний час, пам’ять, дискові операції).
3. Масштабованість: Некоректна структура запитів та таблиць ускладнює масштабування системи при зростанні обсягів даних.
4. Зниження читабельності та підтримки: Складний або дубльований код важче розуміти, оновлювати та тестувати.
Чому важлива оптимізація SQL-коду?
1. Продуктивність системи
Ефективний SQL-код зменшує час виконання запитів. Це важливо для програм, де потрібна швидка обробка даних, наприклад у реальному часі чи для звітності.
2. Ресурсоефективність
Оптимізовані запити зменшують навантаження на сервер, що дозволяє системі працювати стабільніше й обробляти більше одночасних запитів.
3. Зменшення вартості інфраструктури
Менше використання ресурсів бази даних означає менші витрати на підтримку серверів та хмарних рішень.
4. Покращення масштабованості
Грамотно спроєктовані запити і бази даних дозволяють системі легко адаптуватися до збільшення обсягів даних або кількості користувачів.
5. Читабельність і підтримка
Оптимізований код легше розуміти та підтримувати, що спрощує роботу команди розробників і мінімізує ризики помилок.


Далі буде декілька прикладів оптимізації sql коду:


Приклад 1: Використання курсорів замість пакетної обробки
Пояснення:
* Причина проблеми: Курсори працюють повільно, особливо з великими обсягами даних, оскільки вони виконують пострічкову обробку.
* Виправлення: Використання SQL-запитів із пакетною обробкою (set-based operations) дозволяє оновити дані за один прохід, що значно підвищує продуктивність.
* Чому так краще: Це покращує читабельність коду та зменшує час виконання запитів.


Приклад 2: Нормалізація даних
Пояснення:
* Причина проблеми: Зберігання даних в одній таблиці з декількома однотипними стовпцями (наприклад, Product1, Product2, Product3) порушує принцип нормалізації.
* Виправлення: Розподіл даних на дві таблиці: одна зберігає замовлення, інша — деталі замовлень.
* Чому так краще: Нормалізація спрощує масштабування, зменшує надлишковість даних та покращує читабельність запитів.


Приклад 3: Неоптимальний фільтр із використанням функцій
Пояснення:
* Причина проблеми: Використання функції YEAR() до поля BirthDate змушує SQL Server обчислювати результат для кожного рядка, що призводить до втрати можливості використовувати індекси.
* Виправлення: Заміна фільтра на діапазон значень дозволяє SQL Server використовувати індекси для оптимізації запиту.
* Чому так краще: Це пришвидшує виконання запиту, особливо на великих таблицях, оскільки мінімізується кількість операцій, які виконує сервер.


ВИСНОВКИ


        Оптимізація SQL-коду є ключовим аспектом ефективного управління базами даних і загальної продуктивності програмного забезпечення. Правильно спроектовані запити, таблиці та індекси забезпечують швидку обробку великих обсягів даних, знижують навантаження на сервери та дозволяють системі легко масштабуватись у міру зростання бізнесу.
Некоректний SQL-код може не лише уповільнити роботу системи, але й створити серйозні проблеми з її підтримкою, масштабованістю та вартістю інфраструктури. Використання таких підходів, як нормалізація даних, уникнення курсорів, правильне застосування індексів та оптимізація фільтрів, дозволяє уникнути багатьох типових помилок.


ДОДАТОК А


Код для демонстрації рекомендацій.


Приклад 1: Використання курсорів замість пакетної обробки
Некоректний код:


DECLARE @OrderId INT, @Total DECIMAL(10, 2)
DECLARE OrderCursor CURSOR FOR
SELECT OrderId, TotalAmount
FROM Orders


OPEN OrderCursor
FETCH NEXT FROM OrderCursor INTO @OrderId, @Total


WHILE @@FETCH_STATUS = 0
BEGIN
    UPDATE OrderSummary
    SET TotalSales = TotalSales + @Total
    WHERE OrderId = @OrderId


    FETCH NEXT FROM OrderCursor INTO @OrderId, @Total
END


CLOSE OrderCursor
DEALLOCATE OrderCursor


Рефакторинг:


UPDATE os
SET os.TotalSales = os.TotalSales + o.TotalAmount
FROM OrderSummary os
INNER JOIN Orders o ON os.OrderId = o.OrderId




Приклад 2: Нормалізація даних


Некоректний код:


CREATE TABLE Orders (
    OrderId INT PRIMARY KEY,
    CustomerId INT,
    Product1 VARCHAR(50),
    Product2 VARCHAR(50),
    Product3 VARCHAR(50)
)


SELECT Product1, Product2, Product3
FROM Orders
WHERE CustomerId = 123


Рефакторинг:


CREATE TABLE Orders (
    OrderId INT PRIMARY KEY,
    CustomerId INT
)


CREATE TABLE OrderDetails (
    OrderDetailId INT PRIMARY KEY,
    OrderId INT,
    Product VARCHAR(50),
    FOREIGN KEY (OrderId) REFERENCES Orders(OrderId)
)


SELECT od.Product
FROM Orders o
JOIN OrderDetails od ON o.OrderId = od.OrderId
WHERE o.CustomerId = 123




Приклад 3: Неоптимальний фільтр із використанням функцій


Некоректний код:


SELECT *
FROM Customers
WHERE YEAR(BirthDate) = 1990


Рефакторинг:


SELECT *
FROM Customers
WHERE BirthDate >= '1990-01-01' AND BirthDate < '1991-01-01'


ДОДАТОК Б


Слайди презентації.